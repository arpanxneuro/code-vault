# Search in Linked List

## Problem Description
This exercise focuses on searching for a specific value in a singly linked list. You are given a pointer to the head node of the linked list and an integer `key`. The task is to determine whether the `key` exists in the linked list.  

- If the key exists, return `true` (or `1` in C).  
- Otherwise, return `false` (or `0` in C).

---

## Function Description
Complete the `searchInLinkedList` function with the following parameters:

- **head**: a reference to the head of the linked list  
- **key**: an integer representing the value to search for

**Return Requirement:**  
Return a boolean (`true`/`false`) or integer (`1`/`0`) indicating whether the key exists in the linked list.

---

## Input Format
- The first line contains an integer `n`, the number of elements in the linked list.  
- The next `n` lines contain one element each, representing the node values.  
- The last line contains the integer `key` to search for.

**Note:**  
Do not read input from `stdin` or console. The function will receive the head reference and the integer `key`.

---

## Constraints
- \( 1 \leq n \leq 10^5 \)  
- Node values and `key` can be any integer within the signed 32-bit range.

---

## Sample Input
5
10
20
30
40
50
30
## Sample Output
true


### Explanation
The linked list is:
10 -> 20 -> 30 -> 40 -> 50 -> NULL

The key `30` exists in the list, so the function returns `true`.

---

## Complexity Analysis
- **Time Complexity:** \(O(n)\), where \(n\) is the number of nodes in the linked list.  
- **Space Complexity:** \(O(1)\), since no extra space is required.