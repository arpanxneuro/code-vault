# Delete in a Doubly Linked List

> **Difficulty**: Easy  
> **Accuracy**: 42.98%  
> **Submissions**: 212K+  
> **Points**: 2  

---

## 📝 Problem Statement

You are given a Doubly Linked List and an integer `x`.  
Your task is to remove the node at position `x` (1-indexed) from the list and return the head of the updated list.

---

## 📥 Input

- The input consists of:
  - A doubly linked list of nodes.
  - An integer `x` denoting the position of the node to be deleted (1-indexed).

**Constraints:**
- `1 ≤ x ≤ size of the linked list ≤ 10^6`  
- `0 ≤ node->data ≤ 10^4`

**Note:**  
Do not read input from `stdin`. The function will receive the head reference and integer `x` as parameters.

---

## 📤 Output

Return the head of the modified doubly linked list after deletion.

---

## ✅ Examples

### Example 1
**Input:**  
x = 3  
List: 1 <-> 2 <-> 3 <-> 4

**Output:**  
1 <-> 2 <-> 4

**Explanation:**  
After deleting the node at position 3, the updated list becomes `1 <-> 2 <-> 4`.

---

### Example 2
**Input:**  
x = 1  
List: 5 <-> 2 <-> 9

**Output:**  
2 <-> 9

**Explanation:**  
After deleting the node at position 1, the updated list becomes `2 <-> 9`.

---

## 🧪 Test Cases

| Input | Output |
|---|---|
| `List: 1 <-> 2 <-> 3 <-> 4, x = 2` | `1 <-> 3 <-> 4` |
| `List: 10 <-> 20 <-> 30, x = 3` | `10 <-> 20` |
| `List: 5 <-> 6 <-> 7 <-> 8 <-> 9, x = 5` | `5 <-> 6 <-> 7 <-> 8` |

---

**Time Complexity:** O(n)  
**Space Complexity:** O(1)
