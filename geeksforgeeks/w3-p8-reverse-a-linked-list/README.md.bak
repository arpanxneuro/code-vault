# Reverse a Linked List

## Problem Description
You are given the head of a singly linked list. Your task is to reverse the linked list and return the new head of the reversed list.  

The reversal should be done **in-place**, meaning no new nodes should be created; only the pointers should be rearranged.

---

## Function Description
Complete the `reverseLinkedList` function with the following parameter:

- **head**: a reference to the head of the linked list.

**Return:**  
The head node of the reversed linked list.

---

## Input Format
- The first line contains an integer `n`, the number of nodes in the linked list.  
- The next `n` lines contain one integer each, representing the values of the nodes.

**Note:**  
Do not read input from `stdin` or console. The function will receive the head reference directly.

---

## Constraints
- \(1 \leq n \leq 1000\)  
- Node values are integers in the range \([-10^9, 10^9]\).

---

## Output Format
Return the head of the reversed linked list. Each nodeâ€™s value should be printed on a new line during testing.

---

## Sample Input
3
1
2
3

## Sample Output
3
2
1

### Explanation
Original linked list:  
1 -> 2 -> 3 -> NULL

Reversed linked list:  
3 -> 2 -> 1 -> NULL

---

## Complexity Analysis
- **Time Complexity:** \(O(n)\), where \(n\) is the number of nodes in the linked list.  
- **Space Complexity:** \(O(1)\), as the reversal is done in-place with constant extra space.